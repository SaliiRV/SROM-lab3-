using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using Lab3;


namespace Lab3 {
    [TestFixture]
    public class Test {
        [Test]
        [TestCasecorrect")]
        public void ChekTest(string pol1, string pol2, string pol3, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            int[] c = new int[1];
            a = Program.ToByte(pol1);
            b = Program.ToByte(pol2);
            c = Program.ToByte(pol3);
            var actualResult = Program.Chek(a, b, c);
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("001110000111", "111", "1110000000")]
        [TestCase("10100100101001000110001000100110011010110001001001100011110001000000101110111110011101111100010100101101111000011001011100011001101000011011100110100101110010001111101101111111011111111000001101011000010101010110001100110111011000111011101101011110011100000101101101111111001010001111101010001101101011111110110010011101111101111000001100110111010110100110110111110110101100000101111101010000011001001111111101001011001101100111111001001101110", "01110000001000110001001000100100011111000100010111010111010110001011010010001100011100010001000111101110110000001001010011111101100101101100110010011010010100111001010001111111101111000101000110111100001010101011110110011100011101001011011010111010011011001100000001110110010111110100101010001011001011000110101000111100110111000010000110111100101100101011110001111111001000001100100100110011110100110000000111101101110110100001111010101000000", "11010100100001110111000000000010000101110101011110110100100111001011111100110010000001101101010011000011001000010000001111100100001101110111010100111111100110110110111100000000110000111101001011100100011111111101111010101011000101110000110111100100000111001001101100001001011101111011000000000110100000111000011010100001001010111010001010001011111010001101000110001001100100001001011001100011101101111111111010100110111011000110000011100101110")]
        [TestCase
        public void AdditionTest(string pol1, string pol2, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            a = Program.ToByte(pol1);
            b = Program.ToByte(pol2);
            var actualResult = Program.ToStr(Program.Addition(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("11101010011111111110000000100100000010010011000010000110001101110101010100101101001010101001001010110001000101001100110110010011001111010001001010110011110010101011000010000",
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
        public void ZeroFindTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.ToByte(pol1);
            var actualResult = Program.ToStr(Program.Addition(a, a));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("1110101001111111", "111010100111111100000000000000000000")]
        public void ShiftBitsTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.ToByte(pol1);
            var actualResult = Program.ToStr(Program.ShiftBits(a, 20));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("10111010010111100111101111000000010001100000111101011001011010011111101111100101111100000010010011111110101010000000100100101011100111101100110011001001010101001000001000110011100101101100001111001011100011111101110110101110010101000101010011100001000000001010010111110001001001110110001010110001101010110101101100010011001110101001100000001000100000010001101111010001101111001000010100101101001000001001010110000011111111011010110111101010010", "0", "0")]
        [TestCase
        [TestCase
        public void MulTest(string pol1, string pol2, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            a = Program.ToByte(pol1);
            b = Program.ToByte(pol2);

            var actualResult = Program.ToStr(Program.Multiply(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        public void OneFindTest(string pol1, string pol2, string expectedResult) {
            int[] a = new int[1];
            int[] b = new int[1];
            a = Program.ToByte(pol1);
            b = Program.ToByte(pol2);
            var actualResult = Program.ToStr(Program.Multiply(a, b));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        public void VKvadratTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.ToByte(pol1);
            var actualResult = Program.ToStr(Program.VKvadrat(a));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase("10001000101001001100111000001101001101101100001110101000011100101011011111111110011011101111101010110101101010100001010011100101111001111110011100100001000011101110101000010100011",
            "1")]
        [TestCase("00000000001100010111000111001110010101011011000000111010111010100011101111011110000001010000010111001101001010010100101100000000111110001010101011110011101110011100100000101000001",
            "1")]
        public void TraceTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.ToByte(pol1);
            var actualResult = Program.ToStr(Program.Tr(a));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        [TestCase
        public void PowerTest(string pol1, string N, string expectedResult) {
            int[] a = new int[1];
            int[] n = new int[1];
            a = Program.ToByte(pol1);
            n = Program.ToByte(N);
            var actualResult = Program.ToStr(Program.Power(a, n));
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        [TestCase
        [TestCase
        [TestCase
        public void Inverse_elTest(string pol1, string expectedResult) {
            int[] a = new int[1];
            a = Program.ToByte(pol1);
            var actualResult = Program.ToStr(Program.Inv(a));
            Assert.AreEqual(expectedResult, actualResult);
        }


    }
}
